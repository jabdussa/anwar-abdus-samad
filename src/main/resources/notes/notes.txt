--------------------------------
Links, Sources, Inspiration
--------------------------------
1. https://github.com/BBartosz/akkaRestApi

2. http://www.lightbend.com/activator/template/akka-http-microservice


--------------------------------
Database & Migrations
--------------------------------


--------------------------------
Rest API Queries
--------------------------------
1. Test

   curl http://127.0.0.1

2. User Create, Get, Delete

   export HEADER="'Content-Type: application/json'"
   export USER_URL='http://localhost:9000/v0'
   export USER_DAT="'{"ip1": "8.8.8.8", "ip2": "8.8.4.4"}'"

   # CREATE
   curl -X POST -H $HEADER $USER_URL/users -d $USER_DAT

   # VIEW USERS
   curl $USER_URL/users

  # VIEW POSTS 
  curl http://127.0.0.1:9000/v0/users/1/posts

  # VIEW COMMENT
  curl http://127.0.0.1:9000/v0/users/1/posts/1/comments

--------------------------------
Rest API Responses
--------------------------------
{
  "city": "Mountain View",
  "query": "8.8.8.8",
  "country": "United States",
  "lon": -122.0881,
  "lat": 37.3845
}

--------------------------------
Compiling & Running
--------------------------------

export PDIR=/var/tmp
export REPO=ssh://github.com/jabdussa/anwar_abdus_samad.git
export BRANCH=akka_rest_api_v0
export JAR=$PDIR/anwar_abdus_samad/target/scala-2.11/sbt-0.13/akka_rest_api_v0-assembly-0.0.jar

cd $PDIR

git clone $REPO_URL/$REPO

cd $PDIR/anwar_abdus_samad

git checkout $BRANCH

sbt clean compile assembly

java -jar $JAR


--------------------------------
JSON
--------------------------------

Good Comparison of differnet Scala JSON Modules

   - http://engineering.ooyala.com/blog/comparing-scala-json-libraries


1. Spray-JSON

    - https://github.com/spray/spray-json

    - "io.spray" %%  "spray-json" % "1.3.2"

    - REPL Example

    export JAR=/Users/anwarabdus-samad/.ivy2/cache/io.spray/spray-json_2.11/bundles/spray-json_2.11-1.3.1.jar

    scala -classpath $JAR

    import spray.json._
    import DefaultJsonProtocol._

    val data = """{ "name": "jabdussa", "location": "earth" }"""

    val j = data.parseJson // or JsonParser(source)

    printf(j.toString)

    j.prettyPrint



2. Jacks

   - https://github.com/wg/jacks

   - "com.lambdaworks" % "jacks_2.11" % "2.5.2"



3. Lift

   - http://alvinalexander.com/scala/scala-json-array-parser-parsing-example-lift-json

   - "net.liftweb" % "lift-json_2.11" % "2.6.3"

    import net.liftweb.json._
    import net.liftweb.json.DefaultFormats


    val data = """{ "name": "jabdussa", "location": "earth" }"""



4. Spray

    # CREATE

    export HEADER='Content-Type: application/json'
    export URL='http://localhost:9000/addEntity'
    export DATA="{\"id\":1,\"data\":\"[1,1,1]\"}"
    curl -X POST -H "$HEADER" $URL -d "$DATA"

    ==============

    scala -cp /Users/anwarabdus-samad/.ivy2/cache/io.spray/spray-json_2.11/jars/spray-json_2.11-1.3.2.jar

    import spray.json._
    import DefaultJsonProtocol._

    val data = """{"entityID": 1,"data": [1, 2, 3]}"""

    val j = data.parseJson
